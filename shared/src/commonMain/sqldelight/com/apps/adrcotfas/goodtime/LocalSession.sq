import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS localSession (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp INTEGER NOT NULL,
    duration INTEGER NOT NULL,
    labelName TEXT DEFAULT NULL,
    notes TEXT DEFAULT NULL,
    isArchived INTEGER AS Boolean NOT NULL DEFAULT 0,
    FOREIGN KEY(labelName, isArchived) REFERENCES localLabel(name, isArchived)
    ON UPDATE CASCADE
    ON DELETE SET DEFAULT
);

CREATE INDEX idx_archived ON localSession(isArchived);
CREATE INDEX idx_profile ON localSession(labelName);

insert:
INSERT OR REPLACE INTO localSession(id, timestamp, duration, labelName, notes, isArchived)
VALUES(NULL, ?, ?, ?, ?, ?);

update:
UPDATE localSession
SET timestamp = :newTimestamp, duration = :newDuration, labelName = :newLabel, notes = :newNotes
WHERE id = :id;

selectAll:
SELECT *
FROM localSession  ORDER BY timestamp DESC;

selectByIsArchived:
SELECT *
FROM localSession WHERE isArchived IS ? ORDER BY timestamp DESC;

selectByLabel:
SELECT *
FROM localSession WHERE labelName IS ? ORDER BY timestamp DESC;

selectLastInsertSessionId:
SELECT last_insert_rowid();

delete:
DELETE FROM localSession
WHERE id = ?;

deleteAfter:
DELETE FROM localSession
WHERE timestamp >= :timestamp;

deleteAll:
DELETE FROM localSession;